"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[7872],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5190:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:6},i="ObjectAPI IDL",l={unversionedId:"advanced/objectapi/idl",id:"advanced/objectapi/idl",title:"ObjectAPI IDL",description:"The ObjectAPI IDL can be used in parallel to the ObjectAPI JSON Schema. In fact the IDL is transformed to the JSON schema and then processed by the same tools.",source:"@site/docs/advanced/objectapi/idl.md",sourceDirName:"advanced/objectapi",slug:"/advanced/objectapi/idl",permalink:"/docs/advanced/objectapi/idl",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/objectapi/idl.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"API Examples",permalink:"/docs/advanced/objectapi/examples"},next:{title:"Protocol Mappings",permalink:"/docs/advanced/objectapi/mapping"}},s={},c=[{value:"Interfaces",id:"interfaces",level:2},{value:"Structures",id:"structures",level:2},{value:"Enumerations",id:"enumerations",level:2},{value:"Example",id:"example",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"objectapi-idl"},"ObjectAPI IDL"),(0,r.kt)("p",null,"The ObjectAPI IDL can be used in parallel to the ObjectAPI JSON Schema. In fact the IDL is transformed to the JSON schema and then processed by the same tools."),(0,r.kt)("p",null,"Vice versa the JSON schema can be transformed to the IDL."),(0,r.kt)("p",null,"The IDL does more look like an actual developer language. It is more verbose and more powerful. It allows to define more complex types and to define more complex APIs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"module demo 1.0\n\n// Counter is a simple counter object\ninterface Counter {\n    // count is the current counter value\n    count: int\n    // increment the count property by step\n    increment(int step)\n    // decrement the count property by step\n    decrement(int step)\n}\n")),(0,r.kt)("h2",{id:"interfaces"},"Interfaces"),(0,r.kt)("p",null,"An interface defines a set of properties, operations and signals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"interface name {\n    `prop-name` : type                     // property\n    `method-name` ( params ): `type`       // operation\n    signal `signal-name` ( params )        // signal\n}\n")),(0,r.kt)("p",null,"A type can be either a primitive type or a complex type. A complex type can be a structure, enumeration or another interface."),(0,r.kt)("p",null,"A primitive type can be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool")," : boolean value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"int32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"int64")," : integer value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"float32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"float64")," : floating point value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")," : string value")),(0,r.kt)("p",null,"A complex type can be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name of an interface"),(0,r.kt)("li",{parentName:"ul"},"name of an enumeration"),(0,r.kt)("li",{parentName:"ul"},"name of a structure")),(0,r.kt)("p",null,"To define arrays of a type just append the ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," to the type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"struct Struct1 {}\n\ninterface Demo {\n    propString: string\n    propStringArray: string[]\n    propStruct: Struct1\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Currently we do not support importing other modules. This is planned for a future version.")),(0,r.kt)("h2",{id:"structures"},"Structures"),(0,r.kt)("p",null,"A data structure is a message which can be used to send complex information between objects. A structure is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"struct name {\n    fieldName : type\n}\n")),(0,r.kt)("h2",{id:"enumerations"},"Enumerations"),(0,r.kt)("p",null,"An enumeration is a set of named values. An enumeration is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"enum Enum1 {\n    Value1 = 0\n    Value2 = 1\n    Value3 = 2\n}\n")),(0,r.kt)("p",null,"A value can also be a hex number in the format of ",(0,r.kt)("inlineCode",{parentName:"p"},"0x2"),". If there is no value specified the next value is used."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Here is a complete example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"module demo 1.0\n\ninterface Radio {\n    // frequency is the current frequency in MHz\n    frequency: float\n    // stations is a list of stations\n    stations: Station[]\n    // if enabled automatically tunes to the next station\n    autoTune: bool\n    // scan for stations\n    scan()\n    // tune to a specific frequency\n    tuneFrequency(float frequency)\n    // tune to a specific station\n    tuneStation(stationId: int)\n    // signal emitted when a new station is found\n    signal stationFound(stationId: int)\n}\n\nstruct Station {\n    // id is the station id\n    id: int\n    // name of the station\n    name: string\n    // short name of the station\n    shortName: string\n    // frequency in MHz\n    frequency: float\n    // artwork url\n    artwork: string\n    // category of the content\n    category: Category\n}\n\nenum Category {\n    News = 0\n    Music = 1\n    Talk = 2\n}\n")),(0,r.kt)("p",null,"Our ApiGear tooling can create code in different languages. For example in C++ this would look like (simplified):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Radio {\npublic:\n    // scan for stations\n    void scan();\n    // tune to a specific frequency\n    void tuneFrequency(float frequency);\n    // tune to a specific station\n    void tuneStation(int stationId);\n    // signal emitted when a new station is found\n    void onStationFound(function<void(int stationId)> callback);\npublic:\n    // frequency is the current frequency in MHz\n    float frequency;\n    // stations is a list of stations\n    std::vector<Station> stations;\n    // if enabled automatically tunes to the next station\n    bool autoTune;\n};\n\nstruct Station {\n    // id is the station id\n    int id;\n    // name of the station\n    std::string name;\n    // short name of the station\n    std::string shortName;\n    // frequency in MHz\n    float frequency;\n    // artwork url\n    std::string artwork;\n    // category of the content\n    Category category;\n};\n")))}u.isMDXComponent=!0}}]);